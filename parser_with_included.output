Terminals unused in grammar

    VOID
    BOOLEAN_LITERAL


Rules useless in parser due to conflicts

   33 GlobalTypeExpr: TYPE IDENTIFIER

   47 TypeExpr: TYPE IDENTIFIER


State 8 conflicts: 1 shift/reduce
State 48 conflicts: 6 shift/reduce
State 52 conflicts: 1 shift/reduce
State 106 conflicts: 9 reduce/reduce
State 124 conflicts: 10 reduce/reduce


Grammar

    0 $accept: Program $end

    1 Program: GlobalBlockList

    2 Block: LCBRA BlockList ReturnStmt RCBRA

    3 BlockNoReturn: LCBRA BlockList RCBRA

    4 BlockList: ε
    5          | BlockList StmtList
    6          | BlockList VarDecl

    7 ConditionalBlock: LCBRA BlockList RCBRA

    8 ConditionalExpression: NonAssignExpr CONDITIONAL_OPERATOR NonAssignExpr

    9 IfBlock: IF LPAR ConditionalExpression RPAR BlockNoReturn
   10        | IF LPAR ConditionalExpression RPAR BlockNoReturn ElseIfList

   11 ElseIfList: ε
   12           | ELSE BlockNoReturn
   13           | ElseIfBlock ElseIfList

   14 ElseIfBlock: ELSE IF LPAR ConditionalExpression RPAR BlockNoReturn

   15 WhileBlock: WHILE LPAR ConditionalExpression RPAR BlockNoReturn
   16           | UNROLL WHILE LPAR ConditionalExpression RPAR BlockNoReturn

   17 ReturnStmt: RETURN NonAssignExpr SEMICOLON

   18 FuncDecl: TYPE IDENTIFIER LPAR ParamDeclList RPAR Block

   19 ParamDeclList: ε
   20              | ParamDecl
   21              | ParamDecl COMMA ParamDeclList

   22 ParamDecl: TYPE IDENTIFIER

   23 ParamList: ε
   24          | Param
   25          | Param COMMA ParamList

   26 Param: IDENTIFIER

   27 GlobalBlockList: ε
   28                | GlobalBlockList GlobVarDecl
   29                | GlobalBlockList FuncDecl

   30 GlobVarDecl: TYPE IDENTIFIER SEMICOLON
   31            | GlobalTypeExpr SEMICOLON
   32            | TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET SEMICOLON

   33 GlobalTypeExpr: TYPE IDENTIFIER
   34               | TYPE IDENTIFIER EQ GlobNonAssignExpr
   35               | TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ GlobNonAssignExpr

   36 VarDecl: TYPE IDENTIFIER SEMICOLON
   37        | TypeExpr SEMICOLON
   38        | TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET SEMICOLON

   39 Stmt: SEMICOLON
   40     | Expr SEMICOLON
   41     | IF LPAR ConditionalExpression RPAR ConditionalBlock
   42     | IF LPAR ConditionalExpression RPAR ConditionalBlock ELSE ConditionalBlock
   43     | WhileBlock
   44     | IfBlock

   45 StmtList: Stmt StmtList
   46         | Stmt

   47 TypeExpr: TYPE IDENTIFIER
   48         | TYPE IDENTIFIER EQ NonAssignExpr
   49         | TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ NonAssignExpr

   50 Expr: IDENTIFIER
   51     | IDENTIFIER EQ NonAssignExpr
   52     | IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ NonAssignExpr
   53     | WRITE IDENTIFIER

   54 NonAssignExpr: IDENTIFIER
   55              | IDENTIFIER LPAR ParamList RPAR
   56              | IDENTIFIER OPERATOR NonAssignExpr
   57              | INT_LITERAL OPERATOR NonAssignExpr
   58              | FLOAT_LITERAL OPERATOR NonAssignExpr
   59              | IDENTIFIER LBRACKET INT_LITERAL RBRACKET OPERATOR NonAssignExpr
   60              | FLOAT_LITERAL
   61              | INT_LITERAL
   62              | CHAR_LITERAL
   63              | IDENTIFIER LBRACKET INT_LITERAL RBRACKET

   64 GlobNonAssignExpr: IDENTIFIER
   65                  | IDENTIFIER OPERATOR GlobNonAssignExpr
   66                  | INT_LITERAL OPERATOR GlobNonAssignExpr
   67                  | INT_LITERAL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258) 18 22 30 32 33 34 35 36 38 47 48 49
    VOID <string> (259)
    RETURN <string> (260) 17
    IDENTIFIER <string> (261) 18 22 26 30 32 33 34 35 36 38 47 48 49 50 51 52 53 54 55 56 59 63 64 65
    SEMICOLON <char> (262) 17 30 31 32 36 37 38 39 40
    LCBRA <char> (263) 2 3 7
    RCBRA <char> (264) 2 3 7
    LPAR <char> (265) 9 10 14 15 16 18 41 42 55
    RPAR <char> (266) 9 10 14 15 16 18 41 42 55
    LBRACKET <char> (267) 32 35 38 49 52 59 63
    RBRACKET <char> (268) 32 35 38 49 52 59 63
    COMMA <char> (269) 21 25
    EQ <char> (270) 34 35 48 49 51 52
    OPERATOR <string> (271) 56 57 58 59 65 66
    CONDITIONAL_OPERATOR <string> (272) 8
    INT_LITERAL <number> (273) 32 35 38 49 52 57 59 61 63 66 67
    FLOAT_LITERAL <float_number> (274) 58 60
    CHAR_LITERAL <character> (275) 62
    BOOLEAN_LITERAL <boolean> (276)
    WRITE (277) 53
    WHILE (278) 15 16
    IF (279) 9 10 14 41 42
    ELSE (280) 12 14 42
    UNROLL (281) 16


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    Program <ast> (28)
        on left: 1
        on right: 0
    Block <ast> (29)
        on left: 2
        on right: 18
    BlockNoReturn <ast> (30)
        on left: 3
        on right: 9 10 12 14 15 16
    BlockList <ast> (31)
        on left: 4 5 6
        on right: 2 3 5 6 7
    ConditionalBlock <ast> (32)
        on left: 7
        on right: 41 42
    ConditionalExpression <ast> (33)
        on left: 8
        on right: 9 10 14 15 16 41 42
    IfBlock <ast> (34)
        on left: 9 10
        on right: 44
    ElseIfList <ast> (35)
        on left: 11 12 13
        on right: 10 13
    ElseIfBlock <ast> (36)
        on left: 14
        on right: 13
    WhileBlock <ast> (37)
        on left: 15 16
        on right: 43
    ReturnStmt <ast> (38)
        on left: 17
        on right: 2
    FuncDecl <ast> (39)
        on left: 18
        on right: 29
    ParamDeclList <ast> (40)
        on left: 19 20 21
        on right: 18 21
    ParamDecl <ast> (41)
        on left: 22
        on right: 20 21
    ParamList <ast> (42)
        on left: 23 24 25
        on right: 25 55
    Param <ast> (43)
        on left: 26
        on right: 24 25
    GlobalBlockList <ast> (44)
        on left: 27 28 29
        on right: 1 28 29
    GlobVarDecl <ast> (45)
        on left: 30 31 32
        on right: 28
    GlobalTypeExpr <ast> (46)
        on left: 33 34 35
        on right: 31
    VarDecl <ast> (47)
        on left: 36 37 38
        on right: 6
    Stmt <ast> (48)
        on left: 39 40 41 42 43 44
        on right: 45 46
    StmtList <ast> (49)
        on left: 45 46
        on right: 5 45
    TypeExpr <ast> (50)
        on left: 47 48 49
        on right: 37
    Expr <ast> (51)
        on left: 50 51 52 53
        on right: 40
    NonAssignExpr <ast> (52)
        on left: 54 55 56 57 58 59 60 61 62 63
        on right: 8 17 48 49 51 52 56 57 58 59
    GlobNonAssignExpr <ast> (53)
        on left: 64 65 66 67
        on right: 34 35 65 66


State 0

    0 $accept: • Program $end

    $default  reduce using rule 27 (GlobalBlockList)

    Program          go to state 1
    GlobalBlockList  go to state 2


State 1

    0 $accept: Program • $end

    $end  shift, and go to state 3


State 2

    1 Program: GlobalBlockList •
   28 GlobalBlockList: GlobalBlockList • GlobVarDecl
   29                | GlobalBlockList • FuncDecl

    TYPE  shift, and go to state 4

    $default  reduce using rule 1 (Program)

    FuncDecl        go to state 5
    GlobVarDecl     go to state 6
    GlobalTypeExpr  go to state 7


State 3

    0 $accept: Program $end •

    $default  accept


State 4

   18 FuncDecl: TYPE • IDENTIFIER LPAR ParamDeclList RPAR Block
   30 GlobVarDecl: TYPE • IDENTIFIER SEMICOLON
   32            | TYPE • IDENTIFIER LBRACKET INT_LITERAL RBRACKET SEMICOLON
   33 GlobalTypeExpr: TYPE • IDENTIFIER
   34               | TYPE • IDENTIFIER EQ GlobNonAssignExpr
   35               | TYPE • IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ GlobNonAssignExpr

    IDENTIFIER  shift, and go to state 8


State 5

   29 GlobalBlockList: GlobalBlockList FuncDecl •

    $default  reduce using rule 29 (GlobalBlockList)


State 6

   28 GlobalBlockList: GlobalBlockList GlobVarDecl •

    $default  reduce using rule 28 (GlobalBlockList)


State 7

   31 GlobVarDecl: GlobalTypeExpr • SEMICOLON

    SEMICOLON  shift, and go to state 9


State 8

   18 FuncDecl: TYPE IDENTIFIER • LPAR ParamDeclList RPAR Block
   30 GlobVarDecl: TYPE IDENTIFIER • SEMICOLON
   32            | TYPE IDENTIFIER • LBRACKET INT_LITERAL RBRACKET SEMICOLON
   33 GlobalTypeExpr: TYPE IDENTIFIER •
   34               | TYPE IDENTIFIER • EQ GlobNonAssignExpr
   35               | TYPE IDENTIFIER • LBRACKET INT_LITERAL RBRACKET EQ GlobNonAssignExpr

    SEMICOLON  shift, and go to state 10
    LPAR       shift, and go to state 11
    LBRACKET   shift, and go to state 12
    EQ         shift, and go to state 13

    SEMICOLON  [reduce using rule 33 (GlobalTypeExpr)]


State 9

   31 GlobVarDecl: GlobalTypeExpr SEMICOLON •

    $default  reduce using rule 31 (GlobVarDecl)


State 10

   30 GlobVarDecl: TYPE IDENTIFIER SEMICOLON •

    $default  reduce using rule 30 (GlobVarDecl)


State 11

   18 FuncDecl: TYPE IDENTIFIER LPAR • ParamDeclList RPAR Block

    TYPE  shift, and go to state 14

    $default  reduce using rule 19 (ParamDeclList)

    ParamDeclList  go to state 15
    ParamDecl      go to state 16


State 12

   32 GlobVarDecl: TYPE IDENTIFIER LBRACKET • INT_LITERAL RBRACKET SEMICOLON
   35 GlobalTypeExpr: TYPE IDENTIFIER LBRACKET • INT_LITERAL RBRACKET EQ GlobNonAssignExpr

    INT_LITERAL  shift, and go to state 17


State 13

   34 GlobalTypeExpr: TYPE IDENTIFIER EQ • GlobNonAssignExpr

    IDENTIFIER   shift, and go to state 18
    INT_LITERAL  shift, and go to state 19

    GlobNonAssignExpr  go to state 20


State 14

   22 ParamDecl: TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 21


State 15

   18 FuncDecl: TYPE IDENTIFIER LPAR ParamDeclList • RPAR Block

    RPAR  shift, and go to state 22


State 16

   20 ParamDeclList: ParamDecl •
   21              | ParamDecl • COMMA ParamDeclList

    COMMA  shift, and go to state 23

    $default  reduce using rule 20 (ParamDeclList)


State 17

   32 GlobVarDecl: TYPE IDENTIFIER LBRACKET INT_LITERAL • RBRACKET SEMICOLON
   35 GlobalTypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL • RBRACKET EQ GlobNonAssignExpr

    RBRACKET  shift, and go to state 24


State 18

   64 GlobNonAssignExpr: IDENTIFIER •
   65                  | IDENTIFIER • OPERATOR GlobNonAssignExpr

    OPERATOR  shift, and go to state 25

    $default  reduce using rule 64 (GlobNonAssignExpr)


State 19

   66 GlobNonAssignExpr: INT_LITERAL • OPERATOR GlobNonAssignExpr
   67                  | INT_LITERAL •

    OPERATOR  shift, and go to state 26

    $default  reduce using rule 67 (GlobNonAssignExpr)


State 20

   34 GlobalTypeExpr: TYPE IDENTIFIER EQ GlobNonAssignExpr •

    $default  reduce using rule 34 (GlobalTypeExpr)


State 21

   22 ParamDecl: TYPE IDENTIFIER •

    $default  reduce using rule 22 (ParamDecl)


State 22

   18 FuncDecl: TYPE IDENTIFIER LPAR ParamDeclList RPAR • Block

    LCBRA  shift, and go to state 27

    Block  go to state 28


State 23

   21 ParamDeclList: ParamDecl COMMA • ParamDeclList

    TYPE  shift, and go to state 14

    $default  reduce using rule 19 (ParamDeclList)

    ParamDeclList  go to state 29
    ParamDecl      go to state 16


State 24

   32 GlobVarDecl: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET • SEMICOLON
   35 GlobalTypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET • EQ GlobNonAssignExpr

    SEMICOLON  shift, and go to state 30
    EQ         shift, and go to state 31


State 25

   65 GlobNonAssignExpr: IDENTIFIER OPERATOR • GlobNonAssignExpr

    IDENTIFIER   shift, and go to state 18
    INT_LITERAL  shift, and go to state 19

    GlobNonAssignExpr  go to state 32


State 26

   66 GlobNonAssignExpr: INT_LITERAL OPERATOR • GlobNonAssignExpr

    IDENTIFIER   shift, and go to state 18
    INT_LITERAL  shift, and go to state 19

    GlobNonAssignExpr  go to state 33


State 27

    2 Block: LCBRA • BlockList ReturnStmt RCBRA

    $default  reduce using rule 4 (BlockList)

    BlockList  go to state 34


State 28

   18 FuncDecl: TYPE IDENTIFIER LPAR ParamDeclList RPAR Block •

    $default  reduce using rule 18 (FuncDecl)


State 29

   21 ParamDeclList: ParamDecl COMMA ParamDeclList •

    $default  reduce using rule 21 (ParamDeclList)


State 30

   32 GlobVarDecl: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET SEMICOLON •

    $default  reduce using rule 32 (GlobVarDecl)


State 31

   35 GlobalTypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ • GlobNonAssignExpr

    IDENTIFIER   shift, and go to state 18
    INT_LITERAL  shift, and go to state 19

    GlobNonAssignExpr  go to state 35


State 32

   65 GlobNonAssignExpr: IDENTIFIER OPERATOR GlobNonAssignExpr •

    $default  reduce using rule 65 (GlobNonAssignExpr)


State 33

   66 GlobNonAssignExpr: INT_LITERAL OPERATOR GlobNonAssignExpr •

    $default  reduce using rule 66 (GlobNonAssignExpr)


State 34

    2 Block: LCBRA BlockList • ReturnStmt RCBRA
    5 BlockList: BlockList • StmtList
    6          | BlockList • VarDecl

    TYPE        shift, and go to state 36
    RETURN      shift, and go to state 37
    IDENTIFIER  shift, and go to state 38
    SEMICOLON   shift, and go to state 39
    WRITE       shift, and go to state 40
    WHILE       shift, and go to state 41
    IF          shift, and go to state 42
    UNROLL      shift, and go to state 43

    IfBlock     go to state 44
    WhileBlock  go to state 45
    ReturnStmt  go to state 46
    VarDecl     go to state 47
    Stmt        go to state 48
    StmtList    go to state 49
    TypeExpr    go to state 50
    Expr        go to state 51


State 35

   35 GlobalTypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ GlobNonAssignExpr •

    $default  reduce using rule 35 (GlobalTypeExpr)


State 36

   36 VarDecl: TYPE • IDENTIFIER SEMICOLON
   38        | TYPE • IDENTIFIER LBRACKET INT_LITERAL RBRACKET SEMICOLON
   47 TypeExpr: TYPE • IDENTIFIER
   48         | TYPE • IDENTIFIER EQ NonAssignExpr
   49         | TYPE • IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ NonAssignExpr

    IDENTIFIER  shift, and go to state 52


State 37

   17 ReturnStmt: RETURN • NonAssignExpr SEMICOLON

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 57


State 38

   50 Expr: IDENTIFIER •
   51     | IDENTIFIER • EQ NonAssignExpr
   52     | IDENTIFIER • LBRACKET INT_LITERAL RBRACKET EQ NonAssignExpr

    LBRACKET  shift, and go to state 58
    EQ        shift, and go to state 59

    $default  reduce using rule 50 (Expr)


State 39

   39 Stmt: SEMICOLON •

    $default  reduce using rule 39 (Stmt)


State 40

   53 Expr: WRITE • IDENTIFIER

    IDENTIFIER  shift, and go to state 60


State 41

   15 WhileBlock: WHILE • LPAR ConditionalExpression RPAR BlockNoReturn

    LPAR  shift, and go to state 61


State 42

    9 IfBlock: IF • LPAR ConditionalExpression RPAR BlockNoReturn
   10        | IF • LPAR ConditionalExpression RPAR BlockNoReturn ElseIfList
   41 Stmt: IF • LPAR ConditionalExpression RPAR ConditionalBlock
   42     | IF • LPAR ConditionalExpression RPAR ConditionalBlock ELSE ConditionalBlock

    LPAR  shift, and go to state 62


State 43

   16 WhileBlock: UNROLL • WHILE LPAR ConditionalExpression RPAR BlockNoReturn

    WHILE  shift, and go to state 63


State 44

   44 Stmt: IfBlock •

    $default  reduce using rule 44 (Stmt)


State 45

   43 Stmt: WhileBlock •

    $default  reduce using rule 43 (Stmt)


State 46

    2 Block: LCBRA BlockList ReturnStmt • RCBRA

    RCBRA  shift, and go to state 64


State 47

    6 BlockList: BlockList VarDecl •

    $default  reduce using rule 6 (BlockList)


State 48

   45 StmtList: Stmt • StmtList
   46         | Stmt •

    IDENTIFIER  shift, and go to state 38
    SEMICOLON   shift, and go to state 39
    WRITE       shift, and go to state 40
    WHILE       shift, and go to state 41
    IF          shift, and go to state 42
    UNROLL      shift, and go to state 43

    IDENTIFIER  [reduce using rule 46 (StmtList)]
    SEMICOLON   [reduce using rule 46 (StmtList)]
    WRITE       [reduce using rule 46 (StmtList)]
    WHILE       [reduce using rule 46 (StmtList)]
    IF          [reduce using rule 46 (StmtList)]
    UNROLL      [reduce using rule 46 (StmtList)]
    $default    reduce using rule 46 (StmtList)

    IfBlock     go to state 44
    WhileBlock  go to state 45
    Stmt        go to state 48
    StmtList    go to state 65
    Expr        go to state 51


State 49

    5 BlockList: BlockList StmtList •

    $default  reduce using rule 5 (BlockList)


State 50

   37 VarDecl: TypeExpr • SEMICOLON

    SEMICOLON  shift, and go to state 66


State 51

   40 Stmt: Expr • SEMICOLON

    SEMICOLON  shift, and go to state 67


State 52

   36 VarDecl: TYPE IDENTIFIER • SEMICOLON
   38        | TYPE IDENTIFIER • LBRACKET INT_LITERAL RBRACKET SEMICOLON
   47 TypeExpr: TYPE IDENTIFIER •
   48         | TYPE IDENTIFIER • EQ NonAssignExpr
   49         | TYPE IDENTIFIER • LBRACKET INT_LITERAL RBRACKET EQ NonAssignExpr

    SEMICOLON  shift, and go to state 68
    LBRACKET   shift, and go to state 69
    EQ         shift, and go to state 70

    SEMICOLON  [reduce using rule 47 (TypeExpr)]


State 53

   54 NonAssignExpr: IDENTIFIER •
   55              | IDENTIFIER • LPAR ParamList RPAR
   56              | IDENTIFIER • OPERATOR NonAssignExpr
   59              | IDENTIFIER • LBRACKET INT_LITERAL RBRACKET OPERATOR NonAssignExpr
   63              | IDENTIFIER • LBRACKET INT_LITERAL RBRACKET

    LPAR      shift, and go to state 71
    LBRACKET  shift, and go to state 72
    OPERATOR  shift, and go to state 73

    $default  reduce using rule 54 (NonAssignExpr)


State 54

   57 NonAssignExpr: INT_LITERAL • OPERATOR NonAssignExpr
   61              | INT_LITERAL •

    OPERATOR  shift, and go to state 74

    $default  reduce using rule 61 (NonAssignExpr)


State 55

   58 NonAssignExpr: FLOAT_LITERAL • OPERATOR NonAssignExpr
   60              | FLOAT_LITERAL •

    OPERATOR  shift, and go to state 75

    $default  reduce using rule 60 (NonAssignExpr)


State 56

   62 NonAssignExpr: CHAR_LITERAL •

    $default  reduce using rule 62 (NonAssignExpr)


State 57

   17 ReturnStmt: RETURN NonAssignExpr • SEMICOLON

    SEMICOLON  shift, and go to state 76


State 58

   52 Expr: IDENTIFIER LBRACKET • INT_LITERAL RBRACKET EQ NonAssignExpr

    INT_LITERAL  shift, and go to state 77


State 59

   51 Expr: IDENTIFIER EQ • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 78


State 60

   53 Expr: WRITE IDENTIFIER •

    $default  reduce using rule 53 (Expr)


State 61

   15 WhileBlock: WHILE LPAR • ConditionalExpression RPAR BlockNoReturn

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    ConditionalExpression  go to state 79
    NonAssignExpr          go to state 80


State 62

    9 IfBlock: IF LPAR • ConditionalExpression RPAR BlockNoReturn
   10        | IF LPAR • ConditionalExpression RPAR BlockNoReturn ElseIfList
   41 Stmt: IF LPAR • ConditionalExpression RPAR ConditionalBlock
   42     | IF LPAR • ConditionalExpression RPAR ConditionalBlock ELSE ConditionalBlock

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    ConditionalExpression  go to state 81
    NonAssignExpr          go to state 80


State 63

   16 WhileBlock: UNROLL WHILE • LPAR ConditionalExpression RPAR BlockNoReturn

    LPAR  shift, and go to state 82


State 64

    2 Block: LCBRA BlockList ReturnStmt RCBRA •

    $default  reduce using rule 2 (Block)


State 65

   45 StmtList: Stmt StmtList •

    $default  reduce using rule 45 (StmtList)


State 66

   37 VarDecl: TypeExpr SEMICOLON •

    $default  reduce using rule 37 (VarDecl)


State 67

   40 Stmt: Expr SEMICOLON •

    $default  reduce using rule 40 (Stmt)


State 68

   36 VarDecl: TYPE IDENTIFIER SEMICOLON •

    $default  reduce using rule 36 (VarDecl)


State 69

   38 VarDecl: TYPE IDENTIFIER LBRACKET • INT_LITERAL RBRACKET SEMICOLON
   49 TypeExpr: TYPE IDENTIFIER LBRACKET • INT_LITERAL RBRACKET EQ NonAssignExpr

    INT_LITERAL  shift, and go to state 83


State 70

   48 TypeExpr: TYPE IDENTIFIER EQ • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 84


State 71

   55 NonAssignExpr: IDENTIFIER LPAR • ParamList RPAR

    IDENTIFIER  shift, and go to state 85

    $default  reduce using rule 23 (ParamList)

    ParamList  go to state 86
    Param      go to state 87


State 72

   59 NonAssignExpr: IDENTIFIER LBRACKET • INT_LITERAL RBRACKET OPERATOR NonAssignExpr
   63              | IDENTIFIER LBRACKET • INT_LITERAL RBRACKET

    INT_LITERAL  shift, and go to state 88


State 73

   56 NonAssignExpr: IDENTIFIER OPERATOR • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 89


State 74

   57 NonAssignExpr: INT_LITERAL OPERATOR • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 90


State 75

   58 NonAssignExpr: FLOAT_LITERAL OPERATOR • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 91


State 76

   17 ReturnStmt: RETURN NonAssignExpr SEMICOLON •

    $default  reduce using rule 17 (ReturnStmt)


State 77

   52 Expr: IDENTIFIER LBRACKET INT_LITERAL • RBRACKET EQ NonAssignExpr

    RBRACKET  shift, and go to state 92


State 78

   51 Expr: IDENTIFIER EQ NonAssignExpr •

    $default  reduce using rule 51 (Expr)


State 79

   15 WhileBlock: WHILE LPAR ConditionalExpression • RPAR BlockNoReturn

    RPAR  shift, and go to state 93


State 80

    8 ConditionalExpression: NonAssignExpr • CONDITIONAL_OPERATOR NonAssignExpr

    CONDITIONAL_OPERATOR  shift, and go to state 94


State 81

    9 IfBlock: IF LPAR ConditionalExpression • RPAR BlockNoReturn
   10        | IF LPAR ConditionalExpression • RPAR BlockNoReturn ElseIfList
   41 Stmt: IF LPAR ConditionalExpression • RPAR ConditionalBlock
   42     | IF LPAR ConditionalExpression • RPAR ConditionalBlock ELSE ConditionalBlock

    RPAR  shift, and go to state 95


State 82

   16 WhileBlock: UNROLL WHILE LPAR • ConditionalExpression RPAR BlockNoReturn

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    ConditionalExpression  go to state 96
    NonAssignExpr          go to state 80


State 83

   38 VarDecl: TYPE IDENTIFIER LBRACKET INT_LITERAL • RBRACKET SEMICOLON
   49 TypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL • RBRACKET EQ NonAssignExpr

    RBRACKET  shift, and go to state 97


State 84

   48 TypeExpr: TYPE IDENTIFIER EQ NonAssignExpr •

    $default  reduce using rule 48 (TypeExpr)


State 85

   26 Param: IDENTIFIER •

    $default  reduce using rule 26 (Param)


State 86

   55 NonAssignExpr: IDENTIFIER LPAR ParamList • RPAR

    RPAR  shift, and go to state 98


State 87

   24 ParamList: Param •
   25          | Param • COMMA ParamList

    COMMA  shift, and go to state 99

    $default  reduce using rule 24 (ParamList)


State 88

   59 NonAssignExpr: IDENTIFIER LBRACKET INT_LITERAL • RBRACKET OPERATOR NonAssignExpr
   63              | IDENTIFIER LBRACKET INT_LITERAL • RBRACKET

    RBRACKET  shift, and go to state 100


State 89

   56 NonAssignExpr: IDENTIFIER OPERATOR NonAssignExpr •

    $default  reduce using rule 56 (NonAssignExpr)


State 90

   57 NonAssignExpr: INT_LITERAL OPERATOR NonAssignExpr •

    $default  reduce using rule 57 (NonAssignExpr)


State 91

   58 NonAssignExpr: FLOAT_LITERAL OPERATOR NonAssignExpr •

    $default  reduce using rule 58 (NonAssignExpr)


State 92

   52 Expr: IDENTIFIER LBRACKET INT_LITERAL RBRACKET • EQ NonAssignExpr

    EQ  shift, and go to state 101


State 93

   15 WhileBlock: WHILE LPAR ConditionalExpression RPAR • BlockNoReturn

    LCBRA  shift, and go to state 102

    BlockNoReturn  go to state 103


State 94

    8 ConditionalExpression: NonAssignExpr CONDITIONAL_OPERATOR • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 104


State 95

    9 IfBlock: IF LPAR ConditionalExpression RPAR • BlockNoReturn
   10        | IF LPAR ConditionalExpression RPAR • BlockNoReturn ElseIfList
   41 Stmt: IF LPAR ConditionalExpression RPAR • ConditionalBlock
   42     | IF LPAR ConditionalExpression RPAR • ConditionalBlock ELSE ConditionalBlock

    LCBRA  shift, and go to state 105

    BlockNoReturn     go to state 106
    ConditionalBlock  go to state 107


State 96

   16 WhileBlock: UNROLL WHILE LPAR ConditionalExpression • RPAR BlockNoReturn

    RPAR  shift, and go to state 108


State 97

   38 VarDecl: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET • SEMICOLON
   49 TypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET • EQ NonAssignExpr

    SEMICOLON  shift, and go to state 109
    EQ         shift, and go to state 110


State 98

   55 NonAssignExpr: IDENTIFIER LPAR ParamList RPAR •

    $default  reduce using rule 55 (NonAssignExpr)


State 99

   25 ParamList: Param COMMA • ParamList

    IDENTIFIER  shift, and go to state 85

    $default  reduce using rule 23 (ParamList)

    ParamList  go to state 111
    Param      go to state 87


State 100

   59 NonAssignExpr: IDENTIFIER LBRACKET INT_LITERAL RBRACKET • OPERATOR NonAssignExpr
   63              | IDENTIFIER LBRACKET INT_LITERAL RBRACKET •

    OPERATOR  shift, and go to state 112

    $default  reduce using rule 63 (NonAssignExpr)


State 101

   52 Expr: IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 113


State 102

    3 BlockNoReturn: LCBRA • BlockList RCBRA

    $default  reduce using rule 4 (BlockList)

    BlockList  go to state 114


State 103

   15 WhileBlock: WHILE LPAR ConditionalExpression RPAR BlockNoReturn •

    $default  reduce using rule 15 (WhileBlock)


State 104

    8 ConditionalExpression: NonAssignExpr CONDITIONAL_OPERATOR NonAssignExpr •

    $default  reduce using rule 8 (ConditionalExpression)


State 105

    3 BlockNoReturn: LCBRA • BlockList RCBRA
    7 ConditionalBlock: LCBRA • BlockList RCBRA

    $default  reduce using rule 4 (BlockList)

    BlockList  go to state 115


State 106

    9 IfBlock: IF LPAR ConditionalExpression RPAR BlockNoReturn •
   10        | IF LPAR ConditionalExpression RPAR BlockNoReturn • ElseIfList

    ELSE  shift, and go to state 116

    TYPE        reduce using rule 9 (IfBlock)
    TYPE        [reduce using rule 11 (ElseIfList)]
    RETURN      reduce using rule 9 (IfBlock)
    RETURN      [reduce using rule 11 (ElseIfList)]
    IDENTIFIER  reduce using rule 9 (IfBlock)
    IDENTIFIER  [reduce using rule 11 (ElseIfList)]
    SEMICOLON   reduce using rule 9 (IfBlock)
    SEMICOLON   [reduce using rule 11 (ElseIfList)]
    RCBRA       reduce using rule 9 (IfBlock)
    RCBRA       [reduce using rule 11 (ElseIfList)]
    WRITE       reduce using rule 9 (IfBlock)
    WRITE       [reduce using rule 11 (ElseIfList)]
    WHILE       reduce using rule 9 (IfBlock)
    WHILE       [reduce using rule 11 (ElseIfList)]
    IF          reduce using rule 9 (IfBlock)
    IF          [reduce using rule 11 (ElseIfList)]
    UNROLL      reduce using rule 9 (IfBlock)
    UNROLL      [reduce using rule 11 (ElseIfList)]
    $default    reduce using rule 9 (IfBlock)

    ElseIfList   go to state 117
    ElseIfBlock  go to state 118


State 107

   41 Stmt: IF LPAR ConditionalExpression RPAR ConditionalBlock •
   42     | IF LPAR ConditionalExpression RPAR ConditionalBlock • ELSE ConditionalBlock

    ELSE  shift, and go to state 119

    $default  reduce using rule 41 (Stmt)


State 108

   16 WhileBlock: UNROLL WHILE LPAR ConditionalExpression RPAR • BlockNoReturn

    LCBRA  shift, and go to state 102

    BlockNoReturn  go to state 120


State 109

   38 VarDecl: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET SEMICOLON •

    $default  reduce using rule 38 (VarDecl)


State 110

   49 TypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 121


State 111

   25 ParamList: Param COMMA ParamList •

    $default  reduce using rule 25 (ParamList)


State 112

   59 NonAssignExpr: IDENTIFIER LBRACKET INT_LITERAL RBRACKET OPERATOR • NonAssignExpr

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    NonAssignExpr  go to state 122


State 113

   52 Expr: IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ NonAssignExpr •

    $default  reduce using rule 52 (Expr)


State 114

    3 BlockNoReturn: LCBRA BlockList • RCBRA
    5 BlockList: BlockList • StmtList
    6          | BlockList • VarDecl

    TYPE        shift, and go to state 36
    IDENTIFIER  shift, and go to state 38
    SEMICOLON   shift, and go to state 39
    RCBRA       shift, and go to state 123
    WRITE       shift, and go to state 40
    WHILE       shift, and go to state 41
    IF          shift, and go to state 42
    UNROLL      shift, and go to state 43

    IfBlock     go to state 44
    WhileBlock  go to state 45
    VarDecl     go to state 47
    Stmt        go to state 48
    StmtList    go to state 49
    TypeExpr    go to state 50
    Expr        go to state 51


State 115

    3 BlockNoReturn: LCBRA BlockList • RCBRA
    5 BlockList: BlockList • StmtList
    6          | BlockList • VarDecl
    7 ConditionalBlock: LCBRA BlockList • RCBRA

    TYPE        shift, and go to state 36
    IDENTIFIER  shift, and go to state 38
    SEMICOLON   shift, and go to state 39
    RCBRA       shift, and go to state 124
    WRITE       shift, and go to state 40
    WHILE       shift, and go to state 41
    IF          shift, and go to state 42
    UNROLL      shift, and go to state 43

    IfBlock     go to state 44
    WhileBlock  go to state 45
    VarDecl     go to state 47
    Stmt        go to state 48
    StmtList    go to state 49
    TypeExpr    go to state 50
    Expr        go to state 51


State 116

   12 ElseIfList: ELSE • BlockNoReturn
   14 ElseIfBlock: ELSE • IF LPAR ConditionalExpression RPAR BlockNoReturn

    LCBRA  shift, and go to state 102
    IF     shift, and go to state 125

    BlockNoReturn  go to state 126


State 117

   10 IfBlock: IF LPAR ConditionalExpression RPAR BlockNoReturn ElseIfList •

    $default  reduce using rule 10 (IfBlock)


State 118

   13 ElseIfList: ElseIfBlock • ElseIfList

    ELSE  shift, and go to state 116

    $default  reduce using rule 11 (ElseIfList)

    ElseIfList   go to state 127
    ElseIfBlock  go to state 118


State 119

   42 Stmt: IF LPAR ConditionalExpression RPAR ConditionalBlock ELSE • ConditionalBlock

    LCBRA  shift, and go to state 128

    ConditionalBlock  go to state 129


State 120

   16 WhileBlock: UNROLL WHILE LPAR ConditionalExpression RPAR BlockNoReturn •

    $default  reduce using rule 16 (WhileBlock)


State 121

   49 TypeExpr: TYPE IDENTIFIER LBRACKET INT_LITERAL RBRACKET EQ NonAssignExpr •

    $default  reduce using rule 49 (TypeExpr)


State 122

   59 NonAssignExpr: IDENTIFIER LBRACKET INT_LITERAL RBRACKET OPERATOR NonAssignExpr •

    $default  reduce using rule 59 (NonAssignExpr)


State 123

    3 BlockNoReturn: LCBRA BlockList RCBRA •

    $default  reduce using rule 3 (BlockNoReturn)


State 124

    3 BlockNoReturn: LCBRA BlockList RCBRA •
    7 ConditionalBlock: LCBRA BlockList RCBRA •

    TYPE        reduce using rule 3 (BlockNoReturn)
    TYPE        [reduce using rule 7 (ConditionalBlock)]
    RETURN      reduce using rule 3 (BlockNoReturn)
    RETURN      [reduce using rule 7 (ConditionalBlock)]
    IDENTIFIER  reduce using rule 3 (BlockNoReturn)
    IDENTIFIER  [reduce using rule 7 (ConditionalBlock)]
    SEMICOLON   reduce using rule 3 (BlockNoReturn)
    SEMICOLON   [reduce using rule 7 (ConditionalBlock)]
    RCBRA       reduce using rule 3 (BlockNoReturn)
    RCBRA       [reduce using rule 7 (ConditionalBlock)]
    WRITE       reduce using rule 3 (BlockNoReturn)
    WRITE       [reduce using rule 7 (ConditionalBlock)]
    WHILE       reduce using rule 3 (BlockNoReturn)
    WHILE       [reduce using rule 7 (ConditionalBlock)]
    IF          reduce using rule 3 (BlockNoReturn)
    IF          [reduce using rule 7 (ConditionalBlock)]
    ELSE        reduce using rule 3 (BlockNoReturn)
    ELSE        [reduce using rule 7 (ConditionalBlock)]
    UNROLL      reduce using rule 3 (BlockNoReturn)
    UNROLL      [reduce using rule 7 (ConditionalBlock)]
    $default    reduce using rule 3 (BlockNoReturn)


State 125

   14 ElseIfBlock: ELSE IF • LPAR ConditionalExpression RPAR BlockNoReturn

    LPAR  shift, and go to state 130


State 126

   12 ElseIfList: ELSE BlockNoReturn •

    $default  reduce using rule 12 (ElseIfList)


State 127

   13 ElseIfList: ElseIfBlock ElseIfList •

    $default  reduce using rule 13 (ElseIfList)


State 128

    7 ConditionalBlock: LCBRA • BlockList RCBRA

    $default  reduce using rule 4 (BlockList)

    BlockList  go to state 131


State 129

   42 Stmt: IF LPAR ConditionalExpression RPAR ConditionalBlock ELSE ConditionalBlock •

    $default  reduce using rule 42 (Stmt)


State 130

   14 ElseIfBlock: ELSE IF LPAR • ConditionalExpression RPAR BlockNoReturn

    IDENTIFIER     shift, and go to state 53
    INT_LITERAL    shift, and go to state 54
    FLOAT_LITERAL  shift, and go to state 55
    CHAR_LITERAL   shift, and go to state 56

    ConditionalExpression  go to state 132
    NonAssignExpr          go to state 80


State 131

    5 BlockList: BlockList • StmtList
    6          | BlockList • VarDecl
    7 ConditionalBlock: LCBRA BlockList • RCBRA

    TYPE        shift, and go to state 36
    IDENTIFIER  shift, and go to state 38
    SEMICOLON   shift, and go to state 39
    RCBRA       shift, and go to state 133
    WRITE       shift, and go to state 40
    WHILE       shift, and go to state 41
    IF          shift, and go to state 42
    UNROLL      shift, and go to state 43

    IfBlock     go to state 44
    WhileBlock  go to state 45
    VarDecl     go to state 47
    Stmt        go to state 48
    StmtList    go to state 49
    TypeExpr    go to state 50
    Expr        go to state 51


State 132

   14 ElseIfBlock: ELSE IF LPAR ConditionalExpression • RPAR BlockNoReturn

    RPAR  shift, and go to state 134


State 133

    7 ConditionalBlock: LCBRA BlockList RCBRA •

    $default  reduce using rule 7 (ConditionalBlock)


State 134

   14 ElseIfBlock: ELSE IF LPAR ConditionalExpression RPAR • BlockNoReturn

    LCBRA  shift, and go to state 102

    BlockNoReturn  go to state 135


State 135

   14 ElseIfBlock: ELSE IF LPAR ConditionalExpression RPAR BlockNoReturn •

    $default  reduce using rule 14 (ElseIfBlock)
